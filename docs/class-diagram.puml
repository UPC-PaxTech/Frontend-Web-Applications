@startuml
skinparam packageStyle rectangle

package "app" {
  class AppComponent <<Component>>{
     +title: string
   }
}

package "appointments" {

  package "components" {
    class AppointmentsItemComponent {
      - appointment: ClientAppointment
      + formatDay(dateString: string): string
      + formatTime(dateString: string): string
    }

    class AppointmentsListComponent {
      - appointments: ClientAppointment[]
      - reviews: Review[]
      - appointmentService: AppointmentApiService
      - reviewService: ReviewApiService
      + ngOnInit(): void
      + loadAppointments(): void
      + trackById(index: number, item: ClientAppointment): string
    }

    class UpcomingAppointmentsComponent {
      - upcomingAppointments: ClientAppointment[]
      - appointmentService: AppointmentApiService
      + ngOnInit(): void
      + formatTime(dateStr: string): string
      + formatDay(dateStr: string): string
      + isToday(dateStr: string): boolean
    }

    ' Declaramos ReviewItemComponent y ReviewListComponent solo aqu√≠ en appointments.components
    class ReviewItemComponent {
      - review: Review
      + getStars(): number[]
    }

    class ReviewListComponent {
      - reviews: Review[]
    }
  }

  package "models" {
    entity ClientAppointment {
      - reservationId: string
      - tipo: string
      - clientName: string
      - salonName: string
      - paymentStatus: boolean
      - timeSlotStart: string
      - timeSlotEnd: string
    }
    entity Review {
      - id: number
      - author: string
      - rating: number
      - text: string
      - read: boolean
    }
  }

  package "pages" {
    class AppointmentMakerComponent {
      - worker: Worker[]
      - selectedReservation: { date: Date, timeSlot: any } | null
      + ngOnInit(): void
      + onReservationConfirmed(event: { date: Date, timeSlot: any }): void
      + bookAppointment(): void
    }
    class ClientAppointmentPagesComponent {
    }
  }

  package "services" {
    class AppointmentApiService {
      - resourceEndpoint: string = "/reservationDetails"
      + getAppointments(): Observable<ClientAppointment[]>
    }
    class ReviewApiService {
      - resourceEndpoint: string = "/reviews"
      + getReviews(): Observable<Review[]>
    }
    class AppointmentAssembler {
      + toEntityFromResource(resource: AppointmentResponse): ClientAppointment
      + toEntitiesFromResponse(resources: AppointmentResponse[]): ClientAppointment[]
    }
    class ReviewAssembler {
      + toEntityFromResource(resource: ReviewResponse): Review
      + toEntitiesFromResponse(resources: ReviewResponse[]): Review[]
    }
    class AppointmentResponse {
      - reservationId: string
      - tipo: string
      - client: Client
      - salon: Salon
      - payment: Payment
      - timeSlot: TimeSlot
    }
    class ReviewResponse {
      - id: number
      - author: string
      - rating: number
      - text: string
      - read: boolean
    }
  }
}

package "dashboard" {

  package "components" {
    ' Declaramos ReviewItemComponent y ReviewListComponent **solo como referencia** (no redeclarar)
    ' Para evitar duplicados referenciamos las del paquete appointments.components en relaciones

    class SalonItemComponent {
      - salon: Salon
      + salonSelected: EventEmitter<Salon>
    }

    class SalonListComponent {
      - salons: Salon[]
      + ngOnInit(): void
    }

    class StaffItemComponent {
      - worker: Worker
    }

    class StaffListComponent {
      - WorkerList: Worker[]
    }

    class UpcomingAppointmentsComponent {
      - upcomingAppointments: Appointment[]
      - appointmentService: AppointmentApiService
      - translate: TranslateService
      + ngOnInit(): void
      + formatTime(dateStr: string): string
      + formatDay(dateStr: string): string
      + isToday(dateStr: string): boolean
    }
  }

  package "models" {
    entity Review {
      - id: number
      - author: string
      - rating: number
      - text: string
      - read: boolean
    }

    entity Salon {
      - salonId: string
      - location: string
      - imageURL: string
      - phone: number
      - name: string
    }

    entity Staff {
      ' atributos por definir
    }

    entity Worker {
      - id: number
      - nombre: string
      - especializacion: string
      - foto: string
    }

    entity Appointment {
      - reservationId: string
      - tipo: string
      - clientName: string
      - salonName: string
      - paymentStatus: boolean
      - timeSlotStart: string
      - timeSlotEnd: string
    }
  }

  package "pages" {
    class ClientDashboardComponent {
    }

    class ProfessionalDashboardComponent {
      - worker: Worker[]
      - reviews: Review[]
      + ngOnInit(): void
    }

    class SalonComponent {
      - salon: Salon
      - profile: SalonProfile
      - reviews: Review[]
      - services: Service[]
      + ngOnInit(): void
      + salonSelected: EventEmitter<Salon>
    }
  }

  package "services" {
    class ReviewApiService {
      - resourceEndpoint: string = "/reviews"
      + getReviews(): Observable<Review[]>
    }

    class SalonApiService {
      - baseUrl: string
      - detailsEndpoint: string = "/salons"
      + getSalons(): Observable<Salon[]>
    }

    class StaffApiService
    class AppointmentApiService {
      - resourceEndpoint: string = "/reservationDetails"
      + getAppointments(): Observable<Appointment[]>
    }

    class WorkerApiService {
      - resourceEndpoint: string = "/workers"
      + getWorkers(): Observable<Worker[]>
    }

    class ReviewAssembler {
      + toEntityFromResource(resource: ReviewResponse): Review
      + toEntitiesFromResponse(resources: ReviewResponse[]): Review[]
    }

    class SalonAssembler {
      + toEntityFromResource(resource: SalonsResource): Salon
      + toEntitiesfromResponse(response: SalonsResponse): Salon[]
    }

    class WorkerAssembler {
      + toEntityFromResource(resource: WorkerResource): Worker
      + toEntitiesFromResponse(resources: WorkerResource[]): Worker[]
    }

    class AppointmentAssembler {
      + toEntityFromResource(resource: AppointmentResponse): Appointment
      + toEntitiesFromResponse(resources: AppointmentResponse[]): Appointment[]
    }

    class ReviewResponse {
      - id: number
      - author: string
      - rating: number
      - text: string
      - read: boolean
    }

    class SalonsResource {
      - name: string
      - salonId: string
      - location: string
      - imageURL: string
      - phone: number
    }

    class WorkerResource {
      - workerId: number
      - nombre: string
      - especializacion: string
      - fotoUrl: string
    }

    class AppointmentResponse {
      - reservationId: string
      - tipo: string
      - client: Client
      - salon: Salon
      - payment: Payment
      - timeSlot: TimeSlot
      - worker: Worker
    }
  }
}

' Relaciones entre paquetes y clases usando nombre completo para evitar duplicados

AppointmentsListComponent --> appointments.components.AppointmentsItemComponent : composes
AppointmentsListComponent --> appointments.components.ReviewListComponent : composes
AppointmentsListComponent --> appointments.components.UpcomingAppointmentsComponent : composes

AppointmentsItemComponent --> appointments.models.ClientAppointment : uses
UpcomingAppointmentsComponent --> appointments.models.ClientAppointment : contains 0..*

ReviewItemComponent --> appointments.models.Review : uses
ReviewListComponent --> appointments.models.Review : contains 0..*
ReviewListComponent --> appointments.components.ReviewItemComponent : composes

UpcomingAppointmentsComponent --> appointments.services.AppointmentApiService : uses
AppointmentsListComponent --> appointments.services.AppointmentApiService : uses
AppointmentsListComponent --> appointments.services.ReviewApiService : uses

ProfessionalDashboardComponent --> dashboard.components.StaffListComponent : composes
ProfessionalDashboardComponent --> dashboard.components.UpcomingAppointmentsComponent : composes
ProfessionalDashboardComponent --> appointments.components.ReviewListComponent : composes
ProfessionalDashboardComponent --> dashboard.services.WorkerApiService : uses
ProfessionalDashboardComponent --> dashboard.services.ReviewApiService : uses

ClientDashboardComponent --> dashboard.components.UpcomingAppointmentsComponent : composes
ClientDashboardComponent --> dashboard.components.StaffListComponent : composes
ClientDashboardComponent --> appointments.components.ReviewListComponent : composes
ClientDashboardComponent --> dashboard.components.SalonListComponent : composes

SalonComponent --> dashboard.models.Salon : uses
SalonComponent --> profile.models.SalonProfile : uses
SalonComponent --> appointments.models.Review : uses
SalonComponent --> dashboard.services.ReviewApiService : uses
SalonComponent --> dashboard.services.SalonApiService : uses
SalonComponent --> dashboard.services.SalonProfileApiService : uses
SalonComponent --> dashboard.services.ServiceApiService : uses
SalonComponent --> appointments.components.ReviewListComponent : composes
SalonComponent --> services.components.ServiceListComponent : composes

AppointmentMakerComponent --> dashboard.services.WorkerApiService : uses
AppointmentMakerComponent --> appointments.services.AppointmentApiService : uses
AppointmentMakerComponent --> dashboard.components.StaffListComponent : composes
AppointmentMakerComponent --> schedule.components.DatePickerComponent : composes
AppointmentMakerComponent --> appointments.components.ReviewListComponent : composes
AppointmentMakerComponent --> services.components.ServiceListComponent : composes

ClientAppointmentPagesComponent --> appointments.components.AppointmentsListComponent : composes
ClientAppointmentPagesComponent --> dashboard.components.SalonListComponent : composes
ClientAppointmentPagesComponent --> public.components.SidebarClientComponent : composes
ClientAppointmentPagesComponent --> appointments.components.UpcomingAppointmentsComponent : composes

ClientFavoriteComponent --> appointments.components.UpcomingAppointmentsComponent : composes
ClientFavoriteComponent --> public.components.SidebarClientComponent : composes
ClientFavoriteComponent --> dashboard.components.SalonListComponent : composes
ClientFavoriteComponent --> favorites.components.SalonGridComponent : composes

SidebarClientComponent --> appointments.components.UpcomingAppointmentsComponent : uses

CalendarComponent --> dashboard.models.Appointment : uses
CalendarComponent --> dashboard.services.AppointmentApiService : uses

SchedulePageComponent --> schedule.components.CalendarComponent : composes
SchedulePageComponent --> public.components.ToolbarProviderComponent : composes

' Y as√≠ con todas las dem√°s relaciones, aseg√∫rate siempre de usar el nombre completo en la relaci√≥n para que PlantUML no duplique las clases

package "favorites" {

  package "pages" {
    class ClientFavoriteComponent {
    }
  }

  package "components" {
    class SalonGridComponent {
      - salons: dashboard.models.Salon[]
      + ngOnInit(): void
    }
  }
}

package "iam" {
  package "pages" {
    class RegisterPageComponent {
      - isProvider: boolean
      - showPlanSelector: boolean
      + toggleForm(isProvider: boolean): void
      + completeRegistration(): void
    }

    class LoginPage
  }

  package "components" {
    class RegisterFormClientComponent
    class RegisterFormProviderComponent
    class PlanSelectorComponent {
      - selectedPlan: string
      + onPlanSelect(plan: string): void
    }
    class LoginFormComponent
  }

  ' Relaciones de composici√≥n internas
  RegisterPageComponent --> iam.components.RegisterFormClientComponent : composes
  RegisterPageComponent --> iam.components.RegisterFormProviderComponent : composes
  RegisterPageComponent --> iam.components.PlanSelectorComponent : composes
  RegisterPageComponent --> iam.components.LoginFormComponent : composes
}

package "profile" {

  package "components" {
    class ProfileHeaderComponent {
      - profile: profile.models.SalonProfile
    }

    class ProfilePortfolioComponent {
      - profile: profile.models.SalonProfile
      + onAddPhoto(): void
      + onImageClick(imageUrl: string): void
    }

    class ReviewItemComponent {
      - review: dashboard.models.Review
    }

    class ReviewListComponent {
      - profileReviews: dashboard.models.Review[]
      + ngOnInit(): void
    }
  }

  package "models" {
    class SalonProfile {
      - profileId: number
      - userId: string
      - salonName: string
      - rating: number
      - profileImage: string
      - coverImage: string
      - socials: socials
      - portfolioImages: string[]
      - address: string
      - email: string
      - accounts: accounts
    }
  }

  package "pages" {
    class ProfilePageComponent {
      - profile: profile.models.SalonProfile
      + ngOnInit(): void
    }
  }

  package "services" {
    class SalonProfileApiService {
      - resourceEndpoint: string = "/salonProfiles"
      + getProfileById(id: number): Observable<profile.models.SalonProfile>
    }

    class SalonProfileAssembler {
      + toEntityFromResponse(resource: SalonProfileResponse): profile.models.SalonProfile
      + toEntitiesFromResponse(resources: SalonProfileResponse[]): profile.models.SalonProfile[]
      + toResponseFromEntity(entity: profile.models.SalonProfile): SalonProfileResponse
    }

    class SalonProfileResponse {
      - id: number
      - userId: string
      - salonName: string
      - rating: number
      - profileImage: string
      - coverImage: string
      - socials: socials
      - portfolioImages: string[]
      - accounts: accounts
      - Address: string
      - salonemail: string
    }
  }
}

package "profileclient" {

  package "components" {
    class ProfileComponent {
      - profileForm: FormGroup
      - passwordForm: FormGroup
      - profile: profileclient.models.Profile
      - isLoading: boolean
      - passwordsMatch: boolean
      - showCurrentPasswordField: boolean
      + ngOnInit(): void
      + loadProfile(): void
      + updateForm(profile: profileclient.models.Profile): void
      + saveProfile(): void
      + changePassword(): void
      + logout(): void
      + deleteAccount(): void
    }
  }

  package "models" {
    entity Profile {
      - accountId: string
      - name: string
      - email: string
      - phoneNumber: string
      - identityDocument: string
      - notifications: boolean
      - location: boolean
    }
  }

  package "pages" {
    class ClientProfileComponent {
    }
  }

  package "services" {
    class ProfileService {
      - apiUrl: string
      + getProfile(): Observable<profileclient.models.Profile>
      + updateProfile(profile: profileclient.models.Profile): Observable<profileclient.models.Profile>
      + changePassword(currentPassword: string, newPassword: string): Observable<boolean>
      + logout(): Observable<boolean>
      + deleteAccount(): Observable<boolean>
    }
  }
}

package "providerSettings" {

  package "components" {
    class SettingsComponent {
      - profile: profile.models.SalonProfile
    }

    class SettingsPasswordComponent {
      - profile: profile.models.SalonProfile
      - value: string
      - currentPassword: string
      - passwordService: profile.services.SalonProfileApiService
      + updatePassword(): void
    }
  }

  package "pages" {
    class SettingsPageComponent {
      - profile: profile.models.SalonProfile
      + ngOnInit(): void
    }
  }
}

' Relaciones internas
SettingsPageComponent --> providerSettings.components.SettingsComponent : composes
SettingsPageComponent --> providerSettings.components.SettingsPasswordComponent : composes

' Relaciones externas para providerSettings
providerSettings.components.SettingsComponent --> profile.models.SalonProfile : uses
providerSettings.components.SettingsPasswordComponent --> profile.models.SalonProfile : uses
providerSettings.components.SettingsPasswordComponent --> profile.services.SalonProfileApiService : uses
providerSettings.components.SettingsPasswordComponent --> profile.services.SalonProfileAssembler : uses
SettingsPageComponent --> profile.services.SalonProfileApiService : uses


package "public" {

  package "components" {
    class ClientLayoutComponent {
    }

    class LanguageSwitcherComponent {
      - currentLang: string
      - languages: string[]
      + useLanguage(language: string): void
    }

    class ProviderLayoutComponent {
    }

    class SidebarComponent {
    }

    class SidebarClientComponent {
    }

    class ToolbarClientComponent {
    }

    class ToolbarProviderComponent {
    }
  }
}

' Relaciones de composici√≥n

public.components.ClientLayoutComponent --> public.components.SidebarComponent : composes
public.components.ClientLayoutComponent --> public.components.ToolbarProviderComponent : composes
public.components.ClientLayoutComponent --> public.components.SidebarClientComponent : composes
public.components.ClientLayoutComponent --> public.components.ToolbarClientComponent : composes

public.components.ProviderLayoutComponent --> public.components.SidebarComponent : composes
public.components.ProviderLayoutComponent --> public.components.ToolbarProviderComponent : composes

public.components.SidebarClientComponent --> appointments.components.UpcomingAppointmentsComponent : uses

public.components.ToolbarClientComponent --> public.components.LanguageSwitcherComponent : composes
public.components.ToolbarProviderComponent --> public.components.LanguageSwitcherComponent : composes


package "reviews" {
  package "pages" {
    class ReviewsTabComponent {
      - reviews: dashboard.models.Review[]
      + ngOnInit(): void
    }
  }
}

' Relaciones externas
reviews.pages.ReviewsTabComponent --> dashboard.components.ReviewListComponent : composes
reviews.pages.ReviewsTabComponent --> dashboard.services.ReviewApiService : uses
reviews.pages.ReviewsTabComponent --> dashboard.models.Review : uses


package "schedule" {

  package "components" {
    class CalendarComponent {
      - days: string[]
      - hours: string[]
      - workers: string[]
      - currentWorkerIndex: number
      - calendars: dashboard.models.Appointment[]
      + get currentWorker(): string
      + swapWorker(): void
      + ngOnInit(): void
      + formatTime(dateStr: string): string
      + formatDay(dateStr: string): string
      + isToday(dateStr: string): boolean
    }

    class DatePickerComponent {
      - selected: Date | null
      - timeSlots: array
      - selectedTimeSlot: any
      + selectTimeSlot(slot: any): void
      + reservationConfirmed: EventEmitter<{date: Date, timeSlot: any}>
    }

    class ReservationComponent {
      - service: string
      - startTime: string
      - endTime: string
      - clientName: string
    }
  }

  package "pages" {
    class SchedulePageComponent {
    }
  }
}

' Relaciones internas y externas de schedule
schedule.components.CalendarComponent --> dashboard.models.Appointment : uses
schedule.components.CalendarComponent --> dashboard.services.AppointmentApiService : uses

schedule.pages.SchedulePageComponent --> schedule.components.CalendarComponent : composes
schedule.pages.SchedulePageComponent --> public.components.ToolbarProviderComponent : composes


package "services" {

  package "components" {
    class CreateServiceDialogComponent {
      - service: services.models.ServiceResponse
      + submit(): void
      + cancel(): void
    }

    class ServiceListComponent {
      - services: services.models.Service[]
      + ngOnInit(): void
    }

    class ServiceTableComponent {
      - displayedColumns: string[]
      - services: services.models.Service[]
      - servicesService: services.services.ServiceApiService
      + createService(): void
      + updateService(): void
      + deleteService(id: number): void
    }
  }

  package "models" {
    entity Service {
      - id: number
      - name: string
      - description: string
      - duration: number
      - price: number
      - status: 'Active' | 'Paused'
    }
  }

  package "services" {
    class ServiceApiService {
      - resourceEndpoint: string
      + getServices(): Observable<services.models.Service[]>
    }

    class ServiceAssembler {
      + toEntityFromResource(resource: services.services.ServiceResponse): services.models.Service
      + toEntitiesFromResponse(resources: services.services.ServiceResponse[]): services.models.Service[]
      + toResponseFromEntity(entity: services.models.Service): services.services.ServiceResponse
    }

    interface ServiceResponse {
      + id: number
      + name: string
      + description: string
      + duration: number
      + price: number
      + status: 'Active' | 'Paused'
    }
  }

  package "pages" {
    class ServicesTabComponent {
      - service: services.models.Service[]
      + ngOnInit(): void
    }
  }
}

' Relaciones
services.pages.ServicesTabComponent --> services.services.ServiceApiService : uses
services.pages.ServicesTabComponent --> services.components.ServiceTableComponent : composes
services.components.ServiceTableComponent --> services.services.ServiceApiService : uses
services.components.ServiceTableComponent --> services.services.ServiceAssembler : uses
services.components.ServiceTableComponent --> services.models.Service : uses
services.components.ServiceListComponent --> services.services.ServiceApiService : uses
services.components.ServiceListComponent --> services.models.Service : uses
services.components.CreateServiceDialogComponent --> services.services.ServiceResponse : uses
services.services.ServiceApiService --> services.services.ServiceAssembler : uses
services.services.ServiceApiService --> services.services.ServiceResponse : uses



package "shared" {

  package "services" {
    abstract class BaseService<R> {
      - httpOptions: object
      - serverBaseUrl: string
      - resourceEndpoint: string
      - http: HttpClient
      - handleError(error: HttpErrorResponse): Observable<never>
      - resourcePath(): string
      + getAll(): Observable<R[]>
      + create(id: any, resource: R): Observable<R>
      + post(resource: R): Observable<R>
      + getById(id: any): Observable<R>
      + delete(id: any): Observable<any>
      + update(id: any, resource: R): Observable<R>
      + partialUpdate(id: any, partialResource: Partial<R>): Observable<R>
    }
  }
}

package "subscription" {
  package "pages" {
    class SubscriptionTabComponent {
    }
  }

  package "components" {
    class SubscriptionPlanComponent {
      - selectedPlan: string
      + changePlan(plan: string): void
    }
  }
}

' Relaciones internas de subscription
subscription.pages.SubscriptionTabComponent --> subscription.components.SubscriptionPlanComponent : composes

' No hab√≠a muchas relaciones externas expl√≠citas para shared y subscription,
' por lo que se mantienen limpias y simples.

@enduml
